<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="df/df5/namespace_modular" kind="namespace">
    <compoundname>Modular</compoundname>
    <innerclass refid="d3/d10/class_modular_1_1_application" prot="public">Modular::Application</innerclass>
    <innerclass refid="dd/d93/class_modular_1_1_constraint" prot="public">Modular::Constraint</innerclass>
    <innerclass refid="d6/d68/class_modular_1_1_controller" prot="public">Modular::Controller</innerclass>
    <innerclass refid="db/d33/class_modular_1_1_debugger" prot="public">Modular::Debugger</innerclass>
    <innerclass refid="d9/d15/class_modular_1_1_email_logger" prot="public">Modular::EmailLogger</innerclass>
    <innerclass refid="d4/df0/class_modular_1_1_string_field_extension" prot="public">Modular::StringFieldExtension</innerclass>
    <innerclass refid="d1/da3/class_modular_1_1_model_extension" prot="public">Modular::ModelExtension</innerclass>
    <innerclass refid="db/d39/class_modular_1_1_form" prot="public">Modular::Form</innerclass>
    <innerclass refid="df/d92/class_modular_1_1_logger" prot="public">Modular::Logger</innerclass>
    <innerclass refid="db/d0a/class_modular_1_1_model" prot="public">Modular::Model</innerclass>
    <innerclass refid="da/d08/class_modular_1_1_object" prot="public">Modular::Object</innerclass>
    <innerclass refid="d4/d0d/class_modular_1_1_permission" prot="public">Modular::Permission</innerclass>
    <innerclass refid="d1/df3/class_modular_1_1_scoped_reference" prot="public">Modular::ScopedReference</innerclass>
    <innerclass refid="d5/d67/class_modular_1_1_task" prot="public">Modular::Task</innerclass>
    <innernamespace refid="d7/d04/namespace_modular_1_1_admin">Modular::Admin</innernamespace>
    <innernamespace refid="df/dee/namespace_modular_1_1_behaviours">Modular::Behaviours</innernamespace>
    <innernamespace refid="dd/d29/namespace_modular_1_1_collections">Modular::Collections</innernamespace>
    <innernamespace refid="d9/d08/namespace_modular_1_1_controllers">Modular::Controllers</innernamespace>
    <innernamespace refid="de/d82/namespace_modular_1_1_exceptions">Modular::Exceptions</innernamespace>
    <innernamespace refid="de/dfe/namespace_modular_1_1_extensions">Modular::Extensions</innernamespace>
    <innernamespace refid="d4/d8c/namespace_modular_1_1_forms">Modular::Forms</innernamespace>
    <innernamespace refid="d3/d7f/namespace_modular_1_1_grid_field">Modular::GridField</innernamespace>
    <innernamespace refid="dd/dfc/namespace_modular_1_1_helpers">Modular::Helpers</innernamespace>
    <innernamespace refid="d5/d56/namespace_modular_1_1_interfaces">Modular::Interfaces</innernamespace>
    <innernamespace refid="d0/da1/namespace_modular_1_1_models">Modular::Models</innernamespace>
    <innernamespace refid="d1/dbf/namespace_modular_1_1_traits">Modular::Traits</innernamespace>
    <innernamespace refid="da/dfe/namespace_modular_1_1_u_i">Modular::UI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Filters limit what models are displayed on page depending on user selection, they can further restrict models after Constraints are applied.</para><para>A modular <ref refid="db/d0a/class_modular_1_1_model" kindref="compound">Model</ref> always controls one primary model type. It expects at least $ModelClass URL param and optionally $ModelID if a single model is being addressed. If no ID then a list of the models can be provided.</para><para><ref refid="d3/d10/class_modular_1_1_application" kindref="compound">Application</ref> level exceptions should throw this, e.g. bad paths or database credentials.</para><para>Add to application ContentControllers to get <ref refid="df/df5/namespace_modular" kindref="compound">Modular</ref> functionality such as requirements.</para><para>Extension added to ModelController</para><para>Interface Action generally implemented by an extension which is attached to a <ref refid="db/d0a/class_modular_1_1_model" kindref="compound">Model</ref> or a <ref refid="d6/d68/class_modular_1_1_controller" kindref="compound">Controller</ref>, such as one which implements a &apos;like&apos; or &apos;delete&apos; operation, via a route such as &apos;person/$ID/like&apos;.</para><para>Declare an interface for exceptions for RTTI and type-hinting, inspection reports etc</para><para>Interface HasLinks for models which have one or more links, either internal or external.</para><para>Interface LinkType implemented by models which can be linked to with different link types, such as a &apos;Download&apos;, &apos;Page&apos; or &apos;Video&apos;</para><para>Interface RouteProvider implemented by <ref refid="d6/d68/class_modular_1_1_controller" kindref="compound">Controller</ref> <ref refid="de/dfe/namespace_modular_1_1_extensions" kindref="compound">Extensions</ref> which provide rules to Director to route to the extended <ref refid="d6/d68/class_modular_1_1_controller" kindref="compound">Controller</ref>.</para><para><ref refid="db/d0a/class_modular_1_1_model" kindref="compound">Model</ref></para><para>Class which adds can methods e.g. canEdit, canDiscombobulate etc</para><para>Add this trait to models or model extensions to notify any &apos;backward&apos; related models (via has_one back to has_many or via belongs_many_many) when events happen on the model. For example add to a &apos;Block&apos; model to ensure that the blocks &apos;owners&apos; (Page or a containing block) get notified when the block itself is changed.</para><para>Return an instance of class nominated in the called classes config.custom_class_name or the called class if not set. This can be called from a create method overriding the standard silverstripe create method.</para><para>Return a collection class derived from  instead of a . The class is nominated in the exhibiting classes config.custom_list_class_name and custom_get can be called from the a method overriding the standard SilverStripe get method.</para><para>Simple trait to send an email via a &apos;notify&apos; method.</para><para>Manage enable/disable status through configuration. By default static config.enabled is checked, if can be overridden by defining a constant &apos;EnablerConfigVar&apos; on the exhibiting model, e.g. for if the default &apos;enabled&apos; is being used elsewhere in heirarchy.</para><para>Class json helper traa</para><para>Trait adds simple md5 hashing functions</para><para>owned, has an owner and invoking this object will invoke the call on the owner, e.g. $this()-&gt;doSomething() will call $this-&gt;owner()-&gt;doSomething()</para><para>Tools for dealing with relationships in SilverStripe</para><para>Trait adds functionality for dealing with upload fields </para>    </detaileddescription>
    <location file="[generated]" line="1" column="1"/>
  </compounddef>
</doxygen>
